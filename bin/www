#!/usr/bin/env node
'use strict';


/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodepop.js:server');


var http = require('http');
var port = require('../package.json').scripts.port;



/**
 * Get port from environment and store in Express.
 * process.env.PORT
*/

var port = normalizePort(port || '3000');
app.set('port', port);


var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
*/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/*var cluster = require('cluster');

cluster.on('exit', function(worker, code, signal) {
  console.log('Worker' + worker.process.pid +
    ' died with code' + code +
    ', and signal' + signal);
  console.log('Starting a new worker');
  cluster.fork();
}

if (cluster.isMaster){
  // soy master y voy a lanzar mis cleones

  let numCPUs = require('os').cpus().length;
  console.log(`hay ${numCPUs} cpus`);

  for(var i=0;i< numCPUs; i++){
    cluster.fork();
  }

}else{
*/

/**
var https = require('https');
var portSSL = require('../package.json').scripts.portSSL;
var portSSL = normalizePort(portSSL || '443');
app.set('portSSL', portSSL);

  /**
   * Create HTTP server.


  var fs = require('fs');
  var options = {
    key: fs.readFileSync('certificates/host.key'),
    cert: fs.readFileSync('certificates/host.cert')
  };

  var serverSSL = https.createServer(options, app);
  /**
   * Listen on provided SSL port, on all network interfaces.


  serverSSL.listen(portSSL);
  serverSSL.on('error', onErrorSSL);
  serverSSL.on('listening', onListeningSSL);

 */




/*
}
*/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPSSL server "error" event.
 */

function onErrorSSL(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof portSSL === 'string'
      ? 'Pipe ' + portSSL
      : 'PortSSL ' + portSSL;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onListeningSSL() {
  var addr = serverSSL.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
